from pathlib import PurePath
from textwrap import dedent

from flask import Flask
from flask.views import MethodView
from flask_smorest import Api, Blueprint, abort
from marshmallow import Schema, fields

from project_name.models import People, db

api_title = "Example API"
# By default, we set the api prefix and version number from the path.
api_prefix = PurePath(__file__).parent.parent.name.replace("_", "-").lower()
api_version = PurePath(__file__).parent.name.replace("_", "-").lower()

blp = Blueprint(
    api_prefix,
    api_prefix,
    url_prefix=f"/{api_prefix}/{api_version}",
    description=dedent("""
        
        # API Documentation
                       
        This is the documentation for your example API.
        It is autogenerated from the documentation written in your `flask_smorest` blueprint.

        ## Styling   
        It supports **Markdown** _styling_ and [links](/example/v1/docs/ui), including 
                       
        ```python
        "big code blocks"
        "across multiple lines"
        ```
        and `"Inline Code Blocks"`
                       
        In any of the description fields.
                       
        ## OpenAPI
        
        There is an accompanying [openapi.json](openapi.json) file, linked at the top of the page,
        from which this is built, which provides this information in a machine-readable way.
    """),
)


class LoremSchema(Schema):
    body = fields.String()


@blp.route("/lorem")
class Lorem(MethodView):
    @blp.response(200, LoremSchema, example={"body": "Lorem Ipsum Dolor Sit Amet"})
    def get(self):
        """Return a short Lorem Ipsum text.

        # Lorem Ipsum Get
        Returns the first 5 characters of Lorem Ipsum.

        ## Arguments
        Can give more explanation here on arguments, if any.

        ## Returns
        Can give more information on returns, if any.
        * `body: str` the first 5 Lorem Ipsum.
        """
        return {"body": "Lorem Ipsum Dolor Sit Amet"}


class UserIDSchema(Schema):
    user_id = fields.Integer()


class GroupIDSchema(Schema):
    group_id = fields.Integer()


class PersonSchema(Schema):
    user_id = fields.Integer(dump_only=True)
    username = fields.String(required=True)
    email = fields.Email(required=True)


@blp.route("/user")
class User(MethodView):
    @blp.arguments(UserIDSchema, location="query", required=True, as_kwargs=True)
    @blp.response(200, PersonSchema)
    @blp.alt_response(404)
    def get(self, user_id):
        """Get a user.

        # GET User

        Get requests are the default requests.

        ## Arguments

        * `user_id: int` A user ID

        `flask_smorest` and `marshmallow` support the deserialization of arugments from the `query`, `url`, or different arguments from both.

        However, by protocol, `get` does *not* support JSON bodies.

        ## Returns

        * `user_id: int` The ID
        * `username: str` The name of the user.
        * `email: str` The email of the user.

        """
        return db.get_or_404(People, user_id)

    @blp.arguments(UserIDSchema, location="query", required=True, as_kwargs=True)
    @blp.response(200)
    @blp.alt_response(404)
    def head(self, user_id):
        """
        Head returns the get response headers, but without a body.

        # HEAD User

        Short-circuiting the body can be useful for:
        * Checking availability before running large or paginated queries.
        * Checking header metadata, such as size or last-modified.
        * Checking API calling syntaxes without running more expensive downstream computations or transfers.

        """
        db.get_or_404(People, user_id)
        return

    @blp.arguments(PersonSchema, location="form", required=True, arg_name="person")
    @blp.response(200, UserIDSchema)
    def post(self, person):
        """
        Put a new user, with a generated User ID.

        # POST User

        ## Arguments
        * `username: str` Name of user
        * `email: str` Email of user, validated by Marshmallow

        ## Returns
        * `user_id: int` The ID of the newly created user.
        """
        record = People(**person)
        db.session.add(record)
        db.session.commit()
        # Note that Marshmallow Deserialization removes the fields not in UserIDSchema.
        return record

    @blp.arguments(UserIDSchema, location="form", required=True, as_kwargs=True)
    @blp.response(200)
    @blp.alt_response(404)
    def delete(self, user_id):
        """
        Delete a user

        # DELETE User

        Deletion of records should be done with an HTTP DELETE verb.

        # Arguments
        * `user_id: int`: The User ID to delete
        """
        success = db.session.query(People).where(People.user_id == user_id).delete()
        if success:
            db.session.commit()
            return True
        abort(404)


@blp.route("/users")
class Users(MethodView):
    @blp.response(200, PersonSchema(many=True))
    def get(self):
        """
        Get all users.

        # GET Users

        Get all users.
        """
        query = db.session.query(People)
        # SQLAlchemy ORM is returning a list of lists of length 1
        # There's got to be a better way
        return [i for j in query.all() for i in j]


def register_api(app: Flask):
    config_prefix = f"{api_prefix}_{api_version.replace('.', '-')}_"
    api_config = {
        "api_version": api_version,
        "openapi_version": "3.1.1",
        "api_title": api_title,
        "openapi_url_prefix": f"/{api_prefix}/{api_version}/docs/",
        "openapi_swagger_ui_path": "",
        "openapi_json_path": "openapi.json",
        "openapi_swagger_ui_version": "5.18.2",
        "openapi_swagger_ui_url": "https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.18.2/",
    }
    prefixed_config = {
        f"{config_prefix}{key}".upper(): val for key, val in api_config.items()
    }

    app.config.update(prefixed_config)
    api = Api(
        app,
        config_prefix=config_prefix,
    )
    api.register_blueprint(blp)
